// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: slitherio.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "slitherio.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slitherio {

namespace {

const ::google::protobuf::Descriptor* Circle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Circle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Direction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Direction_reflection_ = NULL;
const ::google::protobuf::Descriptor* Snake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Snake_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameMessage_MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_slitherio_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_slitherio_2eproto() {
  protobuf_AddDesc_slitherio_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "slitherio.proto");
  GOOGLE_CHECK(file != NULL);
  Circle_descriptor_ = file->message_type(0);
  static const int Circle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circle, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circle, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circle, r_),
  };
  Circle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Circle_descriptor_,
      Circle::default_instance_,
      Circle_offsets_,
      -1,
      -1,
      -1,
      sizeof(Circle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circle, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circle, _is_default_instance_));
  Direction_descriptor_ = file->message_type(1);
  static const int Direction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Direction, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Direction, y_),
  };
  Direction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Direction_descriptor_,
      Direction::default_instance_,
      Direction_offsets_,
      -1,
      -1,
      -1,
      sizeof(Direction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Direction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Direction, _is_default_instance_));
  Snake_descriptor_ = file->message_type(2);
  static const int Snake_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snake, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snake, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snake, segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snake, dir_),
  };
  Snake_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Snake_descriptor_,
      Snake::default_instance_,
      Snake_offsets_,
      -1,
      -1,
      -1,
      sizeof(Snake),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snake, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snake, _is_default_instance_));
  GameMessage_descriptor_ = file->message_type(3);
  static const int GameMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, snakes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, food_),
  };
  GameMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameMessage_descriptor_,
      GameMessage::default_instance_,
      GameMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, _is_default_instance_));
  GameMessage_MessageType_descriptor_ = GameMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_slitherio_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Circle_descriptor_, &Circle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Direction_descriptor_, &Direction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Snake_descriptor_, &Snake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameMessage_descriptor_, &GameMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_slitherio_2eproto() {
  delete Circle::default_instance_;
  delete Circle_reflection_;
  delete Direction::default_instance_;
  delete Direction_reflection_;
  delete Snake::default_instance_;
  delete Snake_reflection_;
  delete GameMessage::default_instance_;
  delete GameMessage_reflection_;
}

void protobuf_AddDesc_slitherio_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_slitherio_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017slitherio.proto\022\tslitherio\"7\n\006Circle\022\014"
    "\n\004food\030\001 \001(\010\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\t\n\001r\030"
    "\004 \001(\001\"!\n\tDirection\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002"
    "\"i\n\005Snake\022\n\n\002id\030\001 \001(\005\022\014\n\004size\030\002 \001(\005\022#\n\010s"
    "egments\030\003 \003(\0132\021.slitherio.Circle\022!\n\003dir\030"
    "\004 \001(\0132\024.slitherio.Direction\"\324\001\n\013GameMess"
    "age\0220\n\004type\030\001 \001(\0162\".slitherio.GameMessag"
    "e.MessageType\022!\n\003dir\030\002 \001(\0132\024.slitherio.D"
    "irection\022 \n\006snakes\030\003 \003(\0132\020.slitherio.Sna"
    "ke\022\037\n\004food\030\004 \003(\0132\021.slitherio.Circle\"-\n\013M"
    "essageType\022\007\n\003DIR\020\000\022\n\n\006NEARBY\020\001\022\t\n\005DEATH"
    "\020\002b\006proto3", 450);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "slitherio.proto", &protobuf_RegisterTypes);
  Circle::default_instance_ = new Circle();
  Direction::default_instance_ = new Direction();
  Snake::default_instance_ = new Snake();
  GameMessage::default_instance_ = new GameMessage();
  Circle::default_instance_->InitAsDefaultInstance();
  Direction::default_instance_->InitAsDefaultInstance();
  Snake::default_instance_->InitAsDefaultInstance();
  GameMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_slitherio_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_slitherio_2eproto {
  StaticDescriptorInitializer_slitherio_2eproto() {
    protobuf_AddDesc_slitherio_2eproto();
  }
} static_descriptor_initializer_slitherio_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Circle::kFoodFieldNumber;
const int Circle::kXFieldNumber;
const int Circle::kYFieldNumber;
const int Circle::kRFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Circle::Circle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:slitherio.Circle)
}

void Circle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Circle::Circle(const Circle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:slitherio.Circle)
}

void Circle::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  food_ = false;
  x_ = 0;
  y_ = 0;
  r_ = 0;
}

Circle::~Circle() {
  // @@protoc_insertion_point(destructor:slitherio.Circle)
  SharedDtor();
}

void Circle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Circle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Circle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Circle_descriptor_;
}

const Circle& Circle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slitherio_2eproto();
  return *default_instance_;
}

Circle* Circle::default_instance_ = NULL;

Circle* Circle::New(::google::protobuf::Arena* arena) const {
  Circle* n = new Circle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Circle::Clear() {
// @@protoc_insertion_point(message_clear_start:slitherio.Circle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Circle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Circle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, food_);

#undef ZR_HELPER_
#undef ZR_

}

bool Circle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:slitherio.Circle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool food = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &food_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_x;
        break;
      }

      // optional double x = 2;
      case 2: {
        if (tag == 17) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_y;
        break;
      }

      // optional double y = 3;
      case 3: {
        if (tag == 25) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_r;
        break;
      }

      // optional double r = 4;
      case 4: {
        if (tag == 33) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:slitherio.Circle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:slitherio.Circle)
  return false;
#undef DO_
}

void Circle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:slitherio.Circle)
  // optional bool food = 1;
  if (this->food() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->food(), output);
  }

  // optional double x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // optional double y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // optional double r = 4;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->r(), output);
  }

  // @@protoc_insertion_point(serialize_end:slitherio.Circle)
}

::google::protobuf::uint8* Circle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:slitherio.Circle)
  // optional bool food = 1;
  if (this->food() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->food(), target);
  }

  // optional double x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // optional double y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // optional double r = 4;
  if (this->r() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->r(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:slitherio.Circle)
  return target;
}

int Circle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:slitherio.Circle)
  int total_size = 0;

  // optional bool food = 1;
  if (this->food() != 0) {
    total_size += 1 + 1;
  }

  // optional double x = 2;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 3;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double r = 4;
  if (this->r() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Circle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:slitherio.Circle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Circle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Circle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:slitherio.Circle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:slitherio.Circle)
    MergeFrom(*source);
  }
}

void Circle::MergeFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:slitherio.Circle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.food() != 0) {
    set_food(from.food());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.r() != 0) {
    set_r(from.r());
  }
}

void Circle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:slitherio.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Circle::CopyFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:slitherio.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Circle::IsInitialized() const {

  return true;
}

void Circle::Swap(Circle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Circle::InternalSwap(Circle* other) {
  std::swap(food_, other->food_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(r_, other->r_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Circle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Circle_descriptor_;
  metadata.reflection = Circle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Circle

// optional bool food = 1;
void Circle::clear_food() {
  food_ = false;
}
 bool Circle::food() const {
  // @@protoc_insertion_point(field_get:slitherio.Circle.food)
  return food_;
}
 void Circle::set_food(bool value) {
  
  food_ = value;
  // @@protoc_insertion_point(field_set:slitherio.Circle.food)
}

// optional double x = 2;
void Circle::clear_x() {
  x_ = 0;
}
 double Circle::x() const {
  // @@protoc_insertion_point(field_get:slitherio.Circle.x)
  return x_;
}
 void Circle::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:slitherio.Circle.x)
}

// optional double y = 3;
void Circle::clear_y() {
  y_ = 0;
}
 double Circle::y() const {
  // @@protoc_insertion_point(field_get:slitherio.Circle.y)
  return y_;
}
 void Circle::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:slitherio.Circle.y)
}

// optional double r = 4;
void Circle::clear_r() {
  r_ = 0;
}
 double Circle::r() const {
  // @@protoc_insertion_point(field_get:slitherio.Circle.r)
  return r_;
}
 void Circle::set_r(double value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:slitherio.Circle.r)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Direction::kXFieldNumber;
const int Direction::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Direction::Direction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:slitherio.Direction)
}

void Direction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Direction::Direction(const Direction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:slitherio.Direction)
}

void Direction::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
}

Direction::~Direction() {
  // @@protoc_insertion_point(destructor:slitherio.Direction)
  SharedDtor();
}

void Direction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Direction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Direction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Direction_descriptor_;
}

const Direction& Direction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slitherio_2eproto();
  return *default_instance_;
}

Direction* Direction::default_instance_ = NULL;

Direction* Direction::New(::google::protobuf::Arena* arena) const {
  Direction* n = new Direction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Direction::Clear() {
// @@protoc_insertion_point(message_clear_start:slitherio.Direction)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Direction, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Direction*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Direction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:slitherio.Direction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:slitherio.Direction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:slitherio.Direction)
  return false;
#undef DO_
}

void Direction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:slitherio.Direction)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:slitherio.Direction)
}

::google::protobuf::uint8* Direction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:slitherio.Direction)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:slitherio.Direction)
  return target;
}

int Direction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:slitherio.Direction)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Direction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:slitherio.Direction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Direction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Direction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:slitherio.Direction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:slitherio.Direction)
    MergeFrom(*source);
  }
}

void Direction::MergeFrom(const Direction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:slitherio.Direction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Direction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:slitherio.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Direction::CopyFrom(const Direction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:slitherio.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Direction::IsInitialized() const {

  return true;
}

void Direction::Swap(Direction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Direction::InternalSwap(Direction* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Direction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Direction_descriptor_;
  metadata.reflection = Direction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Direction

// optional float x = 1;
void Direction::clear_x() {
  x_ = 0;
}
 float Direction::x() const {
  // @@protoc_insertion_point(field_get:slitherio.Direction.x)
  return x_;
}
 void Direction::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:slitherio.Direction.x)
}

// optional float y = 2;
void Direction::clear_y() {
  y_ = 0;
}
 float Direction::y() const {
  // @@protoc_insertion_point(field_get:slitherio.Direction.y)
  return y_;
}
 void Direction::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:slitherio.Direction.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Snake::kIdFieldNumber;
const int Snake::kSizeFieldNumber;
const int Snake::kSegmentsFieldNumber;
const int Snake::kDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Snake::Snake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:slitherio.Snake)
}

void Snake::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  dir_ = const_cast< ::slitherio::Direction*>(&::slitherio::Direction::default_instance());
}

Snake::Snake(const Snake& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:slitherio.Snake)
}

void Snake::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  size_ = 0;
  dir_ = NULL;
}

Snake::~Snake() {
  // @@protoc_insertion_point(destructor:slitherio.Snake)
  SharedDtor();
}

void Snake::SharedDtor() {
  if (this != default_instance_) {
    delete dir_;
  }
}

void Snake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Snake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Snake_descriptor_;
}

const Snake& Snake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slitherio_2eproto();
  return *default_instance_;
}

Snake* Snake::default_instance_ = NULL;

Snake* Snake::New(::google::protobuf::Arena* arena) const {
  Snake* n = new Snake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Snake::Clear() {
// @@protoc_insertion_point(message_clear_start:slitherio.Snake)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Snake, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Snake*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, size_);
  if (GetArenaNoVirtual() == NULL && dir_ != NULL) delete dir_;
  dir_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  segments_.Clear();
}

bool Snake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:slitherio.Snake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_segments;
        break;
      }

      // repeated .slitherio.Circle segments = 3;
      case 3: {
        if (tag == 26) {
         parse_segments:
          DO_(input->IncrementRecursionDepth());
         parse_loop_segments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_segments;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_dir;
        break;
      }

      // optional .slitherio.Direction dir = 4;
      case 4: {
        if (tag == 34) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:slitherio.Snake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:slitherio.Snake)
  return false;
#undef DO_
}

void Snake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:slitherio.Snake)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // repeated .slitherio.Circle segments = 3;
  for (unsigned int i = 0, n = this->segments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->segments(i), output);
  }

  // optional .slitherio.Direction dir = 4;
  if (this->has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->dir_, output);
  }

  // @@protoc_insertion_point(serialize_end:slitherio.Snake)
}

::google::protobuf::uint8* Snake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:slitherio.Snake)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  // repeated .slitherio.Circle segments = 3;
  for (unsigned int i = 0, n = this->segments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->segments(i), false, target);
  }

  // optional .slitherio.Direction dir = 4;
  if (this->has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->dir_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:slitherio.Snake)
  return target;
}

int Snake::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:slitherio.Snake)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional int32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  // optional .slitherio.Direction dir = 4;
  if (this->has_dir()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);
  }

  // repeated .slitherio.Circle segments = 3;
  total_size += 1 * this->segments_size();
  for (int i = 0; i < this->segments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segments(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Snake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:slitherio.Snake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Snake* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Snake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:slitherio.Snake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:slitherio.Snake)
    MergeFrom(*source);
  }
}

void Snake::MergeFrom(const Snake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:slitherio.Snake)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  segments_.MergeFrom(from.segments_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.has_dir()) {
    mutable_dir()->::slitherio::Direction::MergeFrom(from.dir());
  }
}

void Snake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:slitherio.Snake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snake::CopyFrom(const Snake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:slitherio.Snake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snake::IsInitialized() const {

  return true;
}

void Snake::Swap(Snake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Snake::InternalSwap(Snake* other) {
  std::swap(id_, other->id_);
  std::swap(size_, other->size_);
  segments_.UnsafeArenaSwap(&other->segments_);
  std::swap(dir_, other->dir_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Snake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Snake_descriptor_;
  metadata.reflection = Snake_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Snake

// optional int32 id = 1;
void Snake::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Snake::id() const {
  // @@protoc_insertion_point(field_get:slitherio.Snake.id)
  return id_;
}
 void Snake::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:slitherio.Snake.id)
}

// optional int32 size = 2;
void Snake::clear_size() {
  size_ = 0;
}
 ::google::protobuf::int32 Snake::size() const {
  // @@protoc_insertion_point(field_get:slitherio.Snake.size)
  return size_;
}
 void Snake::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:slitherio.Snake.size)
}

// repeated .slitherio.Circle segments = 3;
int Snake::segments_size() const {
  return segments_.size();
}
void Snake::clear_segments() {
  segments_.Clear();
}
const ::slitherio::Circle& Snake::segments(int index) const {
  // @@protoc_insertion_point(field_get:slitherio.Snake.segments)
  return segments_.Get(index);
}
::slitherio::Circle* Snake::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:slitherio.Snake.segments)
  return segments_.Mutable(index);
}
::slitherio::Circle* Snake::add_segments() {
  // @@protoc_insertion_point(field_add:slitherio.Snake.segments)
  return segments_.Add();
}
::google::protobuf::RepeatedPtrField< ::slitherio::Circle >*
Snake::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:slitherio.Snake.segments)
  return &segments_;
}
const ::google::protobuf::RepeatedPtrField< ::slitherio::Circle >&
Snake::segments() const {
  // @@protoc_insertion_point(field_list:slitherio.Snake.segments)
  return segments_;
}

// optional .slitherio.Direction dir = 4;
bool Snake::has_dir() const {
  return !_is_default_instance_ && dir_ != NULL;
}
void Snake::clear_dir() {
  if (GetArenaNoVirtual() == NULL && dir_ != NULL) delete dir_;
  dir_ = NULL;
}
const ::slitherio::Direction& Snake::dir() const {
  // @@protoc_insertion_point(field_get:slitherio.Snake.dir)
  return dir_ != NULL ? *dir_ : *default_instance_->dir_;
}
::slitherio::Direction* Snake::mutable_dir() {
  
  if (dir_ == NULL) {
    dir_ = new ::slitherio::Direction;
  }
  // @@protoc_insertion_point(field_mutable:slitherio.Snake.dir)
  return dir_;
}
::slitherio::Direction* Snake::release_dir() {
  // @@protoc_insertion_point(field_release:slitherio.Snake.dir)
  
  ::slitherio::Direction* temp = dir_;
  dir_ = NULL;
  return temp;
}
void Snake::set_allocated_dir(::slitherio::Direction* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:slitherio.Snake.dir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* GameMessage_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_MessageType_descriptor_;
}
bool GameMessage_MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GameMessage_MessageType GameMessage::DIR;
const GameMessage_MessageType GameMessage::NEARBY;
const GameMessage_MessageType GameMessage::DEATH;
const GameMessage_MessageType GameMessage::MessageType_MIN;
const GameMessage_MessageType GameMessage::MessageType_MAX;
const int GameMessage::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMessage::kTypeFieldNumber;
const int GameMessage::kDirFieldNumber;
const int GameMessage::kSnakesFieldNumber;
const int GameMessage::kFoodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMessage::GameMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:slitherio.GameMessage)
}

void GameMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  dir_ = const_cast< ::slitherio::Direction*>(&::slitherio::Direction::default_instance());
}

GameMessage::GameMessage(const GameMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:slitherio.GameMessage)
}

void GameMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  dir_ = NULL;
}

GameMessage::~GameMessage() {
  // @@protoc_insertion_point(destructor:slitherio.GameMessage)
  SharedDtor();
}

void GameMessage::SharedDtor() {
  if (this != default_instance_) {
    delete dir_;
  }
}

void GameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_descriptor_;
}

const GameMessage& GameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slitherio_2eproto();
  return *default_instance_;
}

GameMessage* GameMessage::default_instance_ = NULL;

GameMessage* GameMessage::New(::google::protobuf::Arena* arena) const {
  GameMessage* n = new GameMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:slitherio.GameMessage)
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && dir_ != NULL) delete dir_;
  dir_ = NULL;
  snakes_.Clear();
  food_.Clear();
}

bool GameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:slitherio.GameMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .slitherio.GameMessage.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::slitherio::GameMessage_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dir;
        break;
      }

      // optional .slitherio.Direction dir = 2;
      case 2: {
        if (tag == 18) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_snakes;
        break;
      }

      // repeated .slitherio.Snake snakes = 3;
      case 3: {
        if (tag == 26) {
         parse_snakes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_snakes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_snakes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_snakes;
        if (input->ExpectTag(34)) goto parse_loop_food;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .slitherio.Circle food = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_food:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_food()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_food;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:slitherio.GameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:slitherio.GameMessage)
  return false;
#undef DO_
}

void GameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:slitherio.GameMessage)
  // optional .slitherio.GameMessage.MessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .slitherio.Direction dir = 2;
  if (this->has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dir_, output);
  }

  // repeated .slitherio.Snake snakes = 3;
  for (unsigned int i = 0, n = this->snakes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->snakes(i), output);
  }

  // repeated .slitherio.Circle food = 4;
  for (unsigned int i = 0, n = this->food_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->food(i), output);
  }

  // @@protoc_insertion_point(serialize_end:slitherio.GameMessage)
}

::google::protobuf::uint8* GameMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:slitherio.GameMessage)
  // optional .slitherio.GameMessage.MessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .slitherio.Direction dir = 2;
  if (this->has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dir_, false, target);
  }

  // repeated .slitherio.Snake snakes = 3;
  for (unsigned int i = 0, n = this->snakes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->snakes(i), false, target);
  }

  // repeated .slitherio.Circle food = 4;
  for (unsigned int i = 0, n = this->food_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->food(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:slitherio.GameMessage)
  return target;
}

int GameMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:slitherio.GameMessage)
  int total_size = 0;

  // optional .slitherio.GameMessage.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .slitherio.Direction dir = 2;
  if (this->has_dir()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);
  }

  // repeated .slitherio.Snake snakes = 3;
  total_size += 1 * this->snakes_size();
  for (int i = 0; i < this->snakes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->snakes(i));
  }

  // repeated .slitherio.Circle food = 4;
  total_size += 1 * this->food_size();
  for (int i = 0; i < this->food_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->food(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:slitherio.GameMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:slitherio.GameMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:slitherio.GameMessage)
    MergeFrom(*source);
  }
}

void GameMessage::MergeFrom(const GameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:slitherio.GameMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  snakes_.MergeFrom(from.snakes_);
  food_.MergeFrom(from.food_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_dir()) {
    mutable_dir()->::slitherio::Direction::MergeFrom(from.dir());
  }
}

void GameMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:slitherio.GameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage::CopyFrom(const GameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:slitherio.GameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage::IsInitialized() const {

  return true;
}

void GameMessage::Swap(GameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMessage::InternalSwap(GameMessage* other) {
  std::swap(type_, other->type_);
  std::swap(dir_, other->dir_);
  snakes_.UnsafeArenaSwap(&other->snakes_);
  food_.UnsafeArenaSwap(&other->food_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMessage_descriptor_;
  metadata.reflection = GameMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameMessage

// optional .slitherio.GameMessage.MessageType type = 1;
void GameMessage::clear_type() {
  type_ = 0;
}
 ::slitherio::GameMessage_MessageType GameMessage::type() const {
  // @@protoc_insertion_point(field_get:slitherio.GameMessage.type)
  return static_cast< ::slitherio::GameMessage_MessageType >(type_);
}
 void GameMessage::set_type(::slitherio::GameMessage_MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:slitherio.GameMessage.type)
}

// optional .slitherio.Direction dir = 2;
bool GameMessage::has_dir() const {
  return !_is_default_instance_ && dir_ != NULL;
}
void GameMessage::clear_dir() {
  if (GetArenaNoVirtual() == NULL && dir_ != NULL) delete dir_;
  dir_ = NULL;
}
const ::slitherio::Direction& GameMessage::dir() const {
  // @@protoc_insertion_point(field_get:slitherio.GameMessage.dir)
  return dir_ != NULL ? *dir_ : *default_instance_->dir_;
}
::slitherio::Direction* GameMessage::mutable_dir() {
  
  if (dir_ == NULL) {
    dir_ = new ::slitherio::Direction;
  }
  // @@protoc_insertion_point(field_mutable:slitherio.GameMessage.dir)
  return dir_;
}
::slitherio::Direction* GameMessage::release_dir() {
  // @@protoc_insertion_point(field_release:slitherio.GameMessage.dir)
  
  ::slitherio::Direction* temp = dir_;
  dir_ = NULL;
  return temp;
}
void GameMessage::set_allocated_dir(::slitherio::Direction* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:slitherio.GameMessage.dir)
}

// repeated .slitherio.Snake snakes = 3;
int GameMessage::snakes_size() const {
  return snakes_.size();
}
void GameMessage::clear_snakes() {
  snakes_.Clear();
}
const ::slitherio::Snake& GameMessage::snakes(int index) const {
  // @@protoc_insertion_point(field_get:slitherio.GameMessage.snakes)
  return snakes_.Get(index);
}
::slitherio::Snake* GameMessage::mutable_snakes(int index) {
  // @@protoc_insertion_point(field_mutable:slitherio.GameMessage.snakes)
  return snakes_.Mutable(index);
}
::slitherio::Snake* GameMessage::add_snakes() {
  // @@protoc_insertion_point(field_add:slitherio.GameMessage.snakes)
  return snakes_.Add();
}
::google::protobuf::RepeatedPtrField< ::slitherio::Snake >*
GameMessage::mutable_snakes() {
  // @@protoc_insertion_point(field_mutable_list:slitherio.GameMessage.snakes)
  return &snakes_;
}
const ::google::protobuf::RepeatedPtrField< ::slitherio::Snake >&
GameMessage::snakes() const {
  // @@protoc_insertion_point(field_list:slitherio.GameMessage.snakes)
  return snakes_;
}

// repeated .slitherio.Circle food = 4;
int GameMessage::food_size() const {
  return food_.size();
}
void GameMessage::clear_food() {
  food_.Clear();
}
const ::slitherio::Circle& GameMessage::food(int index) const {
  // @@protoc_insertion_point(field_get:slitherio.GameMessage.food)
  return food_.Get(index);
}
::slitherio::Circle* GameMessage::mutable_food(int index) {
  // @@protoc_insertion_point(field_mutable:slitherio.GameMessage.food)
  return food_.Mutable(index);
}
::slitherio::Circle* GameMessage::add_food() {
  // @@protoc_insertion_point(field_add:slitherio.GameMessage.food)
  return food_.Add();
}
::google::protobuf::RepeatedPtrField< ::slitherio::Circle >*
GameMessage::mutable_food() {
  // @@protoc_insertion_point(field_mutable_list:slitherio.GameMessage.food)
  return &food_;
}
const ::google::protobuf::RepeatedPtrField< ::slitherio::Circle >&
GameMessage::food() const {
  // @@protoc_insertion_point(field_list:slitherio.GameMessage.food)
  return food_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace slitherio

// @@protoc_insertion_point(global_scope)
